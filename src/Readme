* How to pack OngMani project.

#run :
$  python setup sdist
http://pypi.python.org/pypi/<projectname>

#register :
$  python setup.py register

#uploading :
$  python setup.py sdist bdist_wininst upload

#Reference :
http://docs.python.org/2/distutils/setupscript.html#setup-script
http://docs.python.org/2/distutils/sourcedist.html









# project: ongmanibeimeihong
#

# 
# version: initial
# testing wechat integration.

import eventlet
import eventlet.wsgi
import routes
import routes.middleware
import webob.dec
import webob.exc

def wsgify_args(application):
    @webob.dec.wsgify
    def wrapper(self, req):
        return application(self, req, req.environ['wsgiorg.routing_args'][1])
    return wrapper

class application(object):
    def __call__(self, environ, start_response):
        raise notimplementederror("you must implement __call__")

class middleware(application):
    def __init__(self, application):
        self.application = application

class parsedroutes(middleware):
    def __call__(self, environ, start_response):
        if environ['routes.route'] is none:
            return self.application(environ, start_response)

        # if controller was not specified, call default application.
        controller = environ['wsgiorg.routing_args'][1]['controller']
        if controller is none:
            return self.application(environ, start_response)

        # if action was not specified, call controller.
        action = environ['wsgiorg.routing_args'][1]['action']
        if action is none:
            return controller(environ, start_response)

        # call method matching action, or controller if one doesn't exist.
        method = getattr(controller, action, controller)
        return method(environ, start_response)

class api(application):
    def one(self, environ, start_response):
        start_response("200 ok", [])
        return 'one'

    @webob.dec.wsgify
    def two(self, req):
        return 'two'

    @wsgify_args
    def three(self, req, args):
        return 'three'

sock = eventlet.listen(('', 12345))
map = routes.mapper()
map.connect('/api/{action}/{id}', controller=api())
eventlet.wsgi.server(sock, routes.middleware.RoutesMiddleware(ParsedRoutes(webob.exc.HTTPNotFound()), map))
